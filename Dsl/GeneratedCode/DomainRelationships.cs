//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainRelationship IoTHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoTHasElements.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoTHasElements.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3a3d0156-0947-40ab-8e32-a2ad861fb292")]
	public partial class IoTHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a3d0156, 0x0947, 0x40ab, 0x8e, 0x32, 0xa2, 0xad, 0x86, 0x1f, 0xb2, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTHasElements link in the same Partition as the given IoT
		/// </summary>
		/// <param name="source">IoT to use as the source of the relationship.</param>
		/// <param name="target">Device to use as the target of the relationship.</param>
		public IoTHasElements(IoT source, Device target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTHasElements.IoTDomainRoleId, source), new DslModeling::RoleAssignment(IoTHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoT domain role code
		
		/// <summary>
		/// IoT domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTDomainRoleId = new global::System.Guid(0xdec72998, 0x807d, 0x49dc, 0x9f, 0x02, 0xaa, 0xbb, 0xcb, 0x02, 0xf8, 0xd5);
		
		/// <summary>
		/// DomainRole IoT
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoTHasElements/IoT.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoTHasElements/IoT.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.CyberPhisical_final.IoTHasElements/IoT.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dec72998-807d-49dc-9f02-aabbcb02f8d5")]
		public virtual IoT IoT
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoT)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoT of a Device
		/// <summary>
		/// Gets IoT.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoT GetIoT(Device element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as IoT;
		}
		
		/// <summary>
		/// Sets IoT.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoT(Device element, IoT newIoT)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newIoT);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xcb0f0194, 0xae48, 0x470e, 0x95, 0xa6, 0x1e, 0x9b, 0x86, 0xbb, 0x63, 0x89);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoTHasElements/Element.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoTHasElements/Element.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoT", PropertyDisplayNameKey="Company.CyberPhisical_final.IoTHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cb0f0194-ae48-470e-95a6-1e9b86bb6389")]
		public virtual Device Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a IoT
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Device> GetElements(IoT element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(element, IoTDomainRoleId);
		}
		#endregion
		#region IoT link accessor
		/// <summary>
		/// Get the list of IoTHasElements links to a IoT.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.CyberPhisical_final.IoTHasElements> GetLinksToElements ( global::Company.CyberPhisical_final.IoT ioTInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.IoTHasElements>(ioTInstance, global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the IoTHasElements link to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.CyberPhisical_final.IoTHasElements GetLinkToIoT (global::Company.CyberPhisical_final.Device elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.IoTHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.IoTHasElements>(elementInstance, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTHasElements instance accessors
		
		/// <summary>
		/// Get any IoTHasElements links between a given IoT and a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.CyberPhisical_final.IoTHasElements> GetLinks( global::Company.CyberPhisical_final.IoT source, global::Company.CyberPhisical_final.Device target )
		{
			global::System.Collections.Generic.List<global::Company.CyberPhisical_final.IoTHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.CyberPhisical_final.IoTHasElements>();
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.IoTHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.IoTHasElements>(source, global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId);
			foreach ( global::Company.CyberPhisical_final.IoTHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTHasElements link between a given IoTand a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.CyberPhisical_final.IoTHasElements GetLink( global::Company.CyberPhisical_final.IoT source, global::Company.CyberPhisical_final.Device target )
		{
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.IoTHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.IoTHasElements>(source, global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId);
			foreach ( global::Company.CyberPhisical_final.IoTHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainRelationship DeviceHasSensors
	/// Description for Company.CyberPhisical_final.DeviceHasSensors
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.DeviceHasSensors.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.DeviceHasSensors.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ce4b998-98d2-4941-b7fa-6ef80780a8b7")]
	public partial class DeviceHasSensors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DeviceHasSensors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ce4b998, 0x98d2, 0x4941, 0xb7, 0xfa, 0x6e, 0xf8, 0x07, 0x80, 0xa8, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DeviceHasSensors link in the same Partition as the given Device
		/// </summary>
		/// <param name="source">Device to use as the source of the relationship.</param>
		/// <param name="target">Sensor to use as the target of the relationship.</param>
		public DeviceHasSensors(Device source, Sensor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DeviceHasSensors.DeviceDomainRoleId, source), new DslModeling::RoleAssignment(DeviceHasSensors.SensorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DeviceHasSensors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DeviceHasSensors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DeviceHasSensors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DeviceHasSensors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Device domain role code
		
		/// <summary>
		/// Device domain role Id.
		/// </summary>
		public static readonly global::System.Guid DeviceDomainRoleId = new global::System.Guid(0xc8fb73e7, 0xf697, 0x44e5, 0x90, 0x4c, 0x4f, 0x2c, 0x28, 0x95, 0x73, 0xa7);
		
		/// <summary>
		/// DomainRole Device
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Device
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.DeviceHasSensors/Device.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.DeviceHasSensors/Device.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensors", PropertyDisplayNameKey="Company.CyberPhisical_final.DeviceHasSensors/Device.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8fb73e7-f697-44e5-904c-4f2c289573a7")]
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Device)DslModeling::DomainRoleInfo.GetRolePlayer(this, DeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Device of a Sensor
		/// <summary>
		/// Gets Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Device GetDevice(Sensor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SensorDomainRoleId) as Device;
		}
		
		/// <summary>
		/// Sets Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDevice(Sensor element, Device newDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SensorDomainRoleId, newDevice);
		}
		#endregion
		#region Sensor domain role code
		
		/// <summary>
		/// Sensor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorDomainRoleId = new global::System.Guid(0x4335be7a, 0xa045, 0x476b, 0x8d, 0x76, 0x04, 0x1a, 0xf6, 0x0c, 0xbd, 0x55);
		
		/// <summary>
		/// DomainRole Sensor
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Sensor
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.DeviceHasSensors/Sensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.DeviceHasSensors/Sensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Device", PropertyDisplayNameKey="Company.CyberPhisical_final.DeviceHasSensors/Sensor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4335be7a-a045-476b-8d76-041af60cbd55")]
		public virtual Sensor Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensors of a Device
		/// <summary>
		/// Gets a list of Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensor> GetSensors(Device element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(element, DeviceDomainRoleId);
		}
		#endregion
		#region Device link accessor
		/// <summary>
		/// Get the list of DeviceHasSensors links to a Device.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.CyberPhisical_final.DeviceHasSensors> GetLinksToSensors ( global::Company.CyberPhisical_final.Device deviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.DeviceHasSensors>(deviceInstance, global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId);
		}
		#endregion
		#region Sensor link accessor
		/// <summary>
		/// Get the DeviceHasSensors link to a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.CyberPhisical_final.DeviceHasSensors GetLinkToDevice (global::Company.CyberPhisical_final.Sensor sensorInstance)
		{
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.DeviceHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.DeviceHasSensors>(sensorInstance, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Sensor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DeviceHasSensors instance accessors
		
		/// <summary>
		/// Get any DeviceHasSensors links between a given Device and a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.CyberPhisical_final.DeviceHasSensors> GetLinks( global::Company.CyberPhisical_final.Device source, global::Company.CyberPhisical_final.Sensor target )
		{
			global::System.Collections.Generic.List<global::Company.CyberPhisical_final.DeviceHasSensors> outLinks = new global::System.Collections.Generic.List<global::Company.CyberPhisical_final.DeviceHasSensors>();
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.DeviceHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.DeviceHasSensors>(source, global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId);
			foreach ( global::Company.CyberPhisical_final.DeviceHasSensors link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DeviceHasSensors link between a given Deviceand a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.CyberPhisical_final.DeviceHasSensors GetLink( global::Company.CyberPhisical_final.Device source, global::Company.CyberPhisical_final.Sensor target )
		{
			global::System.Collections.Generic.IList<global::Company.CyberPhisical_final.DeviceHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.CyberPhisical_final.DeviceHasSensors>(source, global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId);
			foreach ( global::Company.CyberPhisical_final.DeviceHasSensors link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
