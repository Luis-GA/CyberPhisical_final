//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass IoT
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoT.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoT.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("60705938-a426-4785-ad5a-e4aeecffb104")]
	public partial class IoT : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoT domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60705938, 0xa426, 0x4785, 0xad, 0x5a, 0xe4, 0xae, 0xec, 0xff, 0xb1, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoT(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoT(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NameDDBB domain property code
		
		/// <summary>
		/// NameDDBB domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDDBBDomainPropertyId = new global::System.Guid(0x99328630, 0x6e9d, 0x4451, 0xb1, 0xeb, 0x43, 0xc7, 0x3c, 0xc6, 0x7e, 0xb0);
		
		/// <summary>
		/// Storage for NameDDBB
		/// </summary>
		private global::System.String nameDDBBPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NameDDBB domain property.
		/// Description for Company.CyberPhisical_final.IoT.Name DDBB
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoT/NameDDBB.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoT/NameDDBB.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("99328630-6e9d-4451-b1eb-43c73cc67eb0")]
		public global::System.String NameDDBB
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nameDDBBPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameDDBBPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoT.NameDDBB domain property.
		/// </summary>
		internal sealed partial class NameDDBBPropertyHandler : DslModeling::DomainPropertyValueHandler<IoT, global::System.String>
		{
			private NameDDBBPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoT.NameDDBB domain property value handler.
			/// </summary>
			public static readonly NameDDBBPropertyHandler Instance = new NameDDBBPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoT.NameDDBB domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDDBBDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IoT element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nameDDBBPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoT element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nameDDBBPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId);
			}
		}
		#endregion
		#region Controllers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controllers.
		/// Description for Company.CyberPhisical_final.IoTHasControllers.IoT
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controllers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::Company.CyberPhisical_final.IoTHasControllers.IoTDomainRoleId);
			}
		}
		#endregion
		#region Alarm opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Alarm.
		/// Description for Company.CyberPhisical_final.IoTHasAlarm.IoT
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Alarms> Alarm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Alarms>, Alarms>(global::Company.CyberPhisical_final.IoTHasAlarm.IoTDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Alarms.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Controller.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Device.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.CyberPhisical_final.Alarms sourceAlarms1 = sourceElement as global::Company.CyberPhisical_final.Alarms;
			if (sourceAlarms1 != null)
			{
				// Create link for path IoTHasAlarm.Alarm
				this.Alarm.Add(sourceAlarms1);

				return;
			}
				
			global::Company.CyberPhisical_final.Controller sourceController2 = sourceElement as global::Company.CyberPhisical_final.Controller;
			if (sourceController2 != null)
			{
				// Create link for path IoTHasControllers.Controllers
				this.Controllers.Add(sourceController2);

				return;
			}
				
			global::Company.CyberPhisical_final.Device sourceDevice3 = sourceElement as global::Company.CyberPhisical_final.Device;
			if (sourceDevice3 != null)
			{
				// Create link for path IoTHasElements.Elements
				this.Elements.Add(sourceDevice3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.CyberPhisical_final.Alarms sourceAlarms1 = sourceElement as global::Company.CyberPhisical_final.Alarms;
			if (sourceAlarms1 != null)
			{
				// Delete link for path IoTHasAlarm.Alarm
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.IoTHasAlarm.GetLinks((global::Company.CyberPhisical_final.IoT)this, sourceAlarms1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.IoTHasAlarm.IoTDomainRoleId, global::Company.CyberPhisical_final.IoTHasAlarm.AlarmsDomainRoleId);
				}

				return;
			}
				
			global::Company.CyberPhisical_final.Controller sourceController2 = sourceElement as global::Company.CyberPhisical_final.Controller;
			if (sourceController2 != null)
			{
				// Delete link for path IoTHasControllers.Controllers
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.IoTHasControllers.GetLinks((global::Company.CyberPhisical_final.IoT)this, sourceController2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.IoTHasControllers.IoTDomainRoleId, global::Company.CyberPhisical_final.IoTHasControllers.ControllerDomainRoleId);
				}

				return;
			}
				
			global::Company.CyberPhisical_final.Device sourceDevice3 = sourceElement as global::Company.CyberPhisical_final.Device;
			if (sourceDevice3 != null)
			{
				// Delete link for path IoTHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.IoTHasElements.GetLinks((global::Company.CyberPhisical_final.IoT)this, sourceDevice3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Device
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Device.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Device.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("01e75ad3-4060-44d7-8bc3-dbc5fe5fc65f")]
	public partial class Device : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Device domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01e75ad3, 0x4060, 0x44d7, 0x8b, 0xc3, 0xdb, 0xc5, 0xfe, 0x5f, 0xc6, 0x5f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa4ed7b51, 0x005e, 0x4e3a, 0xa1, 0xd4, 0xa8, 0xfc, 0xa3, 0x4c, 0x1a, 0x6c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.CyberPhisical_final.Device.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Device/Name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Device/Name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a4ed7b51-005e-4e3a-a1d4-a8fca34c1a6c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoT opposite domain role accessor
		/// <summary>
		/// Gets or sets IoT.
		/// </summary>
		public virtual IoT IoT
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId) as IoT;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId);
			}
		}
		#endregion
		#region Actuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuator.
		/// Description for Company.CyberPhisical_final.DeviceHasActuator.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuators> Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuators>, Actuators>(global::Company.CyberPhisical_final.DeviceHasActuator.DeviceDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Sensor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Actuators.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.CyberPhisical_final.Sensor sourceSensor1 = sourceElement as global::Company.CyberPhisical_final.Sensor;
			if (sourceSensor1 != null)
			{
				// Create link for path DeviceHasSensors.Sensors
				this.Sensors.Add(sourceSensor1);

				return;
			}
				
			global::Company.CyberPhisical_final.Actuators sourceActuators2 = sourceElement as global::Company.CyberPhisical_final.Actuators;
			if (sourceActuators2 != null)
			{
				// Create link for path DeviceHasActuator.Actuator
				this.Actuator.Add(sourceActuators2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.CyberPhisical_final.Sensor sourceSensor1 = sourceElement as global::Company.CyberPhisical_final.Sensor;
			if (sourceSensor1 != null)
			{
				// Delete link for path DeviceHasSensors.Sensors
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.DeviceHasSensors.GetLinks((global::Company.CyberPhisical_final.Device)this, sourceSensor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId);
				}

				return;
			}
				
			global::Company.CyberPhisical_final.Actuators sourceActuators2 = sourceElement as global::Company.CyberPhisical_final.Actuators;
			if (sourceActuators2 != null)
			{
				// Delete link for path DeviceHasActuator.Actuator
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.DeviceHasActuator.GetLinks((global::Company.CyberPhisical_final.Device)this, sourceActuators2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.DeviceHasActuator.DeviceDomainRoleId, global::Company.CyberPhisical_final.DeviceHasActuator.ActuatorsDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Sensor
	/// Description for Company.CyberPhisical_final.Sensor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ee1b923b-99cf-44b2-9c74-1c489b1e42c4")]
	public abstract partial class Sensor : Things
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee1b923b, 0x99cf, 0x44b2, 0x9c, 0x74, 0x1c, 0x48, 0x9b, 0x1e, 0x42, 0xc4);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Sensor(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region current_mesure domain property code
		
		/// <summary>
		/// current_mesure domain property Id.
		/// </summary>
		public static readonly global::System.Guid current_mesureDomainPropertyId = new global::System.Guid(0x1d201e7b, 0x3d92, 0x498e, 0xa3, 0x25, 0x4b, 0x16, 0x12, 0x86, 0x70, 0x89);
		
		/// <summary>
		/// Storage for current_mesure
		/// </summary>
		private global::System.Double current_mesurePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of current_mesure domain property.
		/// Description for Company.CyberPhisical_final.Sensor.Current_mesure
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor/current_mesure.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor/current_mesure.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1d201e7b-3d92-498e-a325-4b1612867089")]
		public global::System.Double current_mesure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return current_mesurePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				current_mesurePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.current_mesure domain property.
		/// </summary>
		internal sealed partial class current_mesurePropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.Double>
		{
			private current_mesurePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.current_mesure domain property value handler.
			/// </summary>
			public static readonly current_mesurePropertyHandler Instance = new current_mesurePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.current_mesure domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return current_mesureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.current_mesurePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.current_mesurePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region name domain property code
		
		/// <summary>
		/// name domain property Id.
		/// </summary>
		public static readonly global::System.Guid nameDomainPropertyId = new global::System.Guid(0x41ea660f, 0xbe4d, 0x4bb3, 0xbb, 0xd8, 0xa3, 0x37, 0x34, 0xc0, 0xd8, 0xab);
		
		/// <summary>
		/// Storage for name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of name domain property.
		/// Description for Company.CyberPhisical_final.Sensor.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor/name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor/name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("41ea660f-be4d-4bb3-bbd8-a33734c0d8ab")]
		public global::System.String name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				namePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.name domain property.
		/// </summary>
		internal sealed partial class namePropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.String>
		{
			private namePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.name domain property value handler.
			/// </summary>
			public static readonly namePropertyHandler Instance = new namePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region type_measure domain property code
		
		/// <summary>
		/// type_measure domain property Id.
		/// </summary>
		public static readonly global::System.Guid type_measureDomainPropertyId = new global::System.Guid(0x7f596f97, 0x6e8e, 0x460a, 0x86, 0xb8, 0x86, 0x51, 0xb7, 0x11, 0x27, 0xeb);
		
		/// <summary>
		/// Storage for type_measure
		/// </summary>
		private global::System.String type_measurePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of type_measure domain property.
		/// Description for Company.CyberPhisical_final.Sensor.Type_measure
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor/type_measure.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor/type_measure.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7f596f97-6e8e-460a-86b8-8651b71127eb")]
		public global::System.String type_measure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return type_measurePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				type_measurePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.type_measure domain property.
		/// </summary>
		internal sealed partial class type_measurePropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.String>
		{
			private type_measurePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.type_measure domain property value handler.
			/// </summary>
			public static readonly type_measurePropertyHandler Instance = new type_measurePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.type_measure domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return type_measureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.type_measurePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.type_measurePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Device opposite domain role accessor
		/// <summary>
		/// Gets or sets Device.
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Sensor
		/// </summary>
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Temperature
	/// Description for Company.CyberPhisical_final.Temperature
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Temperature.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Temperature.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6fca36d4-cc15-45d0-bb2e-246f5e6eaa47")]
	public partial class Temperature : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Temperature domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6fca36d4, 0xcc15, 0x45d0, 0xbb, 0x2e, 0x24, 0x6f, 0x5e, 0x6e, 0xaa, 0x47);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperature(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperature(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Humidity
	/// Description for Company.CyberPhisical_final.Humidity
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Humidity.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Humidity.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f36e410f-a7ad-4b17-8165-ebc7a9dacb1f")]
	public partial class Humidity : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Humidity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf36e410f, 0xa7ad, 0x4b17, 0x81, 0x65, 0xeb, 0xc7, 0xa9, 0xda, 0xcb, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Humidity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Humidity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Custom_sensor
	/// Description for Company.CyberPhisical_final.Custom_sensor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Custom_sensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Custom_sensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4ba904f6-171f-4956-8e5d-585ba8a7918d")]
	public partial class Custom_sensor : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Custom_sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ba904f6, 0x171f, 0x4956, 0x8e, 0x5d, 0x58, 0x5b, 0xa8, 0xa7, 0x91, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Custom_sensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Custom_sensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass SmokeSensor
	/// Description for Company.CyberPhisical_final.SmokeSensor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.SmokeSensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.SmokeSensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("63830adc-233b-4b83-a38a-1d182aa2a48f")]
	public partial class SmokeSensor : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SmokeSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63830adc, 0x233b, 0x4b83, 0xa3, 0x8a, 0x1d, 0x18, 0x2a, 0xa2, 0xa4, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmokeSensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmokeSensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass AirConditioning
	/// Description for Company.CyberPhisical_final.AirConditioning
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.AirConditioning.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.AirConditioning.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7387979-1b82-4db6-9f43-7488484b652a")]
	public partial class AirConditioning : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AirConditioning domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7387979, 0x1b82, 0x4db6, 0x9f, 0x43, 0x74, 0x88, 0x48, 0x4b, 0x65, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirConditioning(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirConditioning(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Siren
	/// Description for Company.CyberPhisical_final.Siren
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Siren.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Siren.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d29e4c68-900f-4a34-9421-38cb1bb83432")]
	public partial class Siren : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Siren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd29e4c68, 0x900f, 0x4a34, 0x94, 0x21, 0x38, 0xcb, 0x1b, 0xb8, 0x34, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Siren(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Siren(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Actuators
	/// Description for Company.CyberPhisical_final.Actuators
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Actuators.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Actuators.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1250097d-8a44-4cde-be0d-6e8e468ac023")]
	public abstract partial class Actuators : Things
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actuators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1250097d, 0x8a44, 0x4cde, 0xbe, 0x0d, 0x6e, 0x8e, 0x46, 0x8a, 0xc0, 0x23);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Actuators(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region name domain property code
		
		/// <summary>
		/// name domain property Id.
		/// </summary>
		public static readonly global::System.Guid nameDomainPropertyId = new global::System.Guid(0xd6e3eb2a, 0xefb7, 0x4212, 0xaa, 0x29, 0x46, 0xdf, 0x0f, 0x17, 0x92, 0x50);
		
		/// <summary>
		/// Storage for name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of name domain property.
		/// Description for Company.CyberPhisical_final.Actuators.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Actuators/name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Actuators/name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d6e3eb2a-efb7-4212-aa29-46df0f179250")]
		public global::System.String name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				namePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Actuators.name domain property.
		/// </summary>
		internal sealed partial class namePropertyHandler : DslModeling::DomainPropertyValueHandler<Actuators, global::System.String>
		{
			private namePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Actuators.name domain property value handler.
			/// </summary>
			public static readonly namePropertyHandler Instance = new namePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Actuators.name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Actuators element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Actuators element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Device opposite domain role accessor
		/// <summary>
		/// Gets or sets Device.
		/// Description for Company.CyberPhisical_final.DeviceHasActuator.Actuators
		/// </summary>
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasActuator.ActuatorsDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasActuator.ActuatorsDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Controller
	/// Description for Company.CyberPhisical_final.Controller
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Controller.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Controller.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b26fec0f-d73c-4bc8-84fa-acf11637d229")]
	public partial class Controller : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Controller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb26fec0f, 0xd73c, 0x4bc8, 0x84, 0xfa, 0xac, 0xf1, 0x16, 0x37, 0xd2, 0x29);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7c5760ab, 0xdf4c, 0x4a59, 0xa6, 0x42, 0xf1, 0x9d, 0xd1, 0x0d, 0xd3, 0x82);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.CyberPhisical_final.Controller.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Controller/Name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Controller/Name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c5760ab-df4c-4a59-a642-f19dd10dd382")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoT opposite domain role accessor
		/// <summary>
		/// Gets or sets IoT.
		/// Description for Company.CyberPhisical_final.IoTHasControllers.Controller
		/// </summary>
		public virtual IoT IoT
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasControllers.ControllerDomainRoleId) as IoT;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasControllers.ControllerDomainRoleId, value);
			}
		}
		#endregion
		#region Thing opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Thing.
		/// Description for Company.CyberPhisical_final.ControllerReferencesThing.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Things> Thing
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Things>, Things>(global::Company.CyberPhisical_final.ControllerReferencesThing.ControllerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Alarms
	/// Description for Company.CyberPhisical_final.Alarms
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Alarms.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Alarms.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3f35d373-8d61-4246-aa24-3b1383304ef7")]
	public partial class Alarms : Things
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Alarms domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3f35d373, 0x8d61, 0x4246, 0xaa, 0x24, 0x3b, 0x13, 0x83, 0x30, 0x4e, 0xf7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Alarms(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Alarms(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region name domain property code
		
		/// <summary>
		/// name domain property Id.
		/// </summary>
		public static readonly global::System.Guid nameDomainPropertyId = new global::System.Guid(0x3e751e1e, 0x8e43, 0x4be2, 0x80, 0x07, 0xc9, 0xf9, 0xe5, 0x5a, 0x0d, 0x7f);
		
		/// <summary>
		/// Storage for name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of name domain property.
		/// Description for Company.CyberPhisical_final.Alarms.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Alarms/name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Alarms/name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e751e1e-8e43-4be2-8007-c9f9e55a0d7f")]
		public global::System.String name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				namePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarms.name domain property.
		/// </summary>
		internal sealed partial class namePropertyHandler : DslModeling::DomainPropertyValueHandler<Alarms, global::System.String>
		{
			private namePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarms.name domain property value handler.
			/// </summary>
			public static readonly namePropertyHandler Instance = new namePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarms.name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarms element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarms element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region condition domain property code
		
		/// <summary>
		/// condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid conditionDomainPropertyId = new global::System.Guid(0x938b0120, 0x2f33, 0x473a, 0xa5, 0x4e, 0xed, 0x27, 0x4d, 0xc8, 0x67, 0x68);
		
		/// <summary>
		/// Storage for condition
		/// </summary>
		private global::System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of condition domain property.
		/// Description for Company.CyberPhisical_final.Alarms.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Alarms/condition.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Alarms/condition.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("938b0120-2f33-473a-a54e-ed274dc86768")]
		public global::System.String condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				conditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarms.condition domain property.
		/// </summary>
		internal sealed partial class conditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Alarms, global::System.String>
		{
			private conditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarms.condition domain property value handler.
			/// </summary>
			public static readonly conditionPropertyHandler Instance = new conditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarms.condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return conditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarms element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarms element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region advertence domain property code
		
		/// <summary>
		/// advertence domain property Id.
		/// </summary>
		public static readonly global::System.Guid advertenceDomainPropertyId = new global::System.Guid(0xfbe86373, 0x5c0d, 0x4440, 0x91, 0x61, 0x19, 0x22, 0xf9, 0xcc, 0xc2, 0xaf);
		
		/// <summary>
		/// Storage for advertence
		/// </summary>
		private global::System.String advertencePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of advertence domain property.
		/// Description for Company.CyberPhisical_final.Alarms.Advertence
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Alarms/advertence.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Alarms/advertence.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fbe86373-5c0d-4440-9161-1922f9ccc2af")]
		public global::System.String advertence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return advertencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				advertencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarms.advertence domain property.
		/// </summary>
		internal sealed partial class advertencePropertyHandler : DslModeling::DomainPropertyValueHandler<Alarms, global::System.String>
		{
			private advertencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarms.advertence domain property value handler.
			/// </summary>
			public static readonly advertencePropertyHandler Instance = new advertencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarms.advertence domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return advertenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarms element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.advertencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarms element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.advertencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoT opposite domain role accessor
		/// <summary>
		/// Gets or sets IoT.
		/// Description for Company.CyberPhisical_final.IoTHasAlarm.Alarms
		/// </summary>
		public virtual IoT IoT
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasAlarm.AlarmsDomainRoleId) as IoT;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasAlarm.AlarmsDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Things
	/// Description for Company.CyberPhisical_final.Things
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Things.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Things.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("302e1d16-0280-4047-918d-0cf5b1ea7df7")]
	public abstract partial class Things : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Things domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x302e1d16, 0x0280, 0x4047, 0x91, 0x8d, 0x0c, 0xf5, 0xb1, 0xea, 0x7d, 0xf7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Things(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Controllers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controllers.
		/// Description for Company.CyberPhisical_final.ControllerReferencesThing.Things
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controllers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::Company.CyberPhisical_final.ControllerReferencesThing.ThingsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass custom_actuator
	/// Description for Company.CyberPhisical_final.custom_actuator
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.custom_actuator.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.custom_actuator.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8ee57918-17b2-492b-9381-70e5a08c74cb")]
	public partial class custom_actuator : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// custom_actuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ee57918, 0x17b2, 0x492b, 0x93, 0x81, 0x70, 0xe5, 0xa0, 0x8c, 0x74, 0xcb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public custom_actuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public custom_actuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
