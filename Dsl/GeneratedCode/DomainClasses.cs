//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass IoT
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.IoT.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.IoT.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("60705938-a426-4785-ad5a-e4aeecffb104")]
	public partial class IoT : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoT domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60705938, 0xa426, 0x4785, 0xad, 0x5a, 0xe4, 0xae, 0xec, 0xff, 0xb1, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoT(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoT(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Device.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.CyberPhisical_final.Device sourceDevice1 = sourceElement as global::Company.CyberPhisical_final.Device;
			if (sourceDevice1 != null)
			{
				// Create link for path IoTHasElements.Elements
				this.Elements.Add(sourceDevice1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.CyberPhisical_final.Device sourceDevice1 = sourceElement as global::Company.CyberPhisical_final.Device;
			if (sourceDevice1 != null)
			{
				// Delete link for path IoTHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.IoTHasElements.GetLinks((global::Company.CyberPhisical_final.IoT)this, sourceDevice1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.IoTHasElements.IoTDomainRoleId, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Device
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Device.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Device.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("01e75ad3-4060-44d7-8bc3-dbc5fe5fc65f")]
	public partial class Device : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Device domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01e75ad3, 0x4060, 0x44d7, 0x8b, 0xc3, 0xdb, 0xc5, 0xfe, 0x5f, 0xc6, 0x5f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa4ed7b51, 0x005e, 0x4e3a, 0xa1, 0xd4, 0xa8, 0xfc, 0xa3, 0x4c, 0x1a, 0x6c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.CyberPhisical_final.Device.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Device/Name.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Device/Name.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a4ed7b51-005e-4e3a-a1d4-a8fca34c1a6c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoT opposite domain role accessor
		/// <summary>
		/// Gets or sets IoT.
		/// </summary>
		public virtual IoT IoT
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId) as IoT;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.IoTHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.CyberPhisical_final.Sensor.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.CyberPhisical_final.Sensor sourceSensor1 = sourceElement as global::Company.CyberPhisical_final.Sensor;
			if (sourceSensor1 != null)
			{
				// Create link for path DeviceHasSensors.Sensors
				this.Sensors.Add(sourceSensor1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.CyberPhisical_final.Sensor sourceSensor1 = sourceElement as global::Company.CyberPhisical_final.Sensor;
			if (sourceSensor1 != null)
			{
				// Delete link for path DeviceHasSensors.Sensors
				
				foreach (DslModeling::ElementLink link in global::Company.CyberPhisical_final.DeviceHasSensors.GetLinks((global::Company.CyberPhisical_final.Device)this, sourceSensor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.CyberPhisical_final.DeviceHasSensors.DeviceDomainRoleId, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Sensor
	/// Description for Company.CyberPhisical_final.Sensor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ee1b923b-99cf-44b2-9c74-1c489b1e42c4")]
	public abstract partial class Sensor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee1b923b, 0x99cf, 0x44b2, 0x9c, 0x74, 0x1c, 0x48, 0x9b, 0x1e, 0x42, 0xc4);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Sensor(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Measure domain property code
		
		/// <summary>
		/// Measure domain property Id.
		/// </summary>
		public static readonly global::System.Guid MeasureDomainPropertyId = new global::System.Guid(0x1d201e7b, 0x3d92, 0x498e, 0xa3, 0x25, 0x4b, 0x16, 0x12, 0x86, 0x70, 0x89);
		
		/// <summary>
		/// Storage for Measure
		/// </summary>
		private global::System.Double measurePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Measure domain property.
		/// Description for Company.CyberPhisical_final.Sensor.Measure
		/// </summary>
		[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Sensor/Measure.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.CyberPhisical_final.Sensor/Measure.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1d201e7b-3d92-498e-a325-4b1612867089")]
		public global::System.Double Measure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return measurePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MeasurePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.Measure domain property.
		/// </summary>
		internal sealed partial class MeasurePropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.Double>
		{
			private MeasurePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.Measure domain property value handler.
			/// </summary>
			public static readonly MeasurePropertyHandler Instance = new MeasurePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.Measure domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MeasureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.measurePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.measurePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Device opposite domain role accessor
		/// <summary>
		/// Gets or sets Device.
		/// Description for Company.CyberPhisical_final.DeviceHasSensors.Sensor
		/// </summary>
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.CyberPhisical_final.DeviceHasSensors.SensorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Temperature
	/// Description for Company.CyberPhisical_final.Temperature
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Temperature.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Temperature.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6fca36d4-cc15-45d0-bb2e-246f5e6eaa47")]
	public partial class Temperature : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Temperature domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6fca36d4, 0xcc15, 0x45d0, 0xbb, 0x2e, 0x24, 0x6f, 0x5e, 0x6e, 0xaa, 0x47);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperature(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperature(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass Humidity
	/// Description for Company.CyberPhisical_final.Humidity
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.Humidity.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.Humidity.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f36e410f-a7ad-4b17-8165-ebc7a9dacb1f")]
	public partial class Humidity : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Humidity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf36e410f, 0xa7ad, 0x4b17, 0x81, 0x65, 0xeb, 0xc7, 0xa9, 0xda, 0xcb, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Humidity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Humidity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass CO2Level
	/// Description for Company.CyberPhisical_final.CO2Level
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.CO2Level.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.CO2Level.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4ba904f6-171f-4956-8e5d-585ba8a7918d")]
	public partial class CO2Level : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CO2Level domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ba904f6, 0x171f, 0x4956, 0x8e, 0x5d, 0x58, 0x5b, 0xa8, 0xa7, 0x91, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CO2Level(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CO2Level(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass SmokeSensor
	/// Description for Company.CyberPhisical_final.SmokeSensor
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.SmokeSensor.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.SmokeSensor.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("63830adc-233b-4b83-a38a-1d182aa2a48f")]
	public partial class SmokeSensor : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SmokeSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63830adc, 0x233b, 0x4b83, 0xa3, 0x8a, 0x1d, 0x18, 0x2a, 0xa2, 0xa4, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmokeSensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmokeSensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass AirConditioning
	/// Description for Company.CyberPhisical_final.AirConditioning
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.AirConditioning.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.AirConditioning.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7387979-1b82-4db6-9f43-7488484b652a")]
	public partial class AirConditioning : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AirConditioning domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7387979, 0x1b82, 0x4db6, 0x9f, 0x43, 0x74, 0x88, 0x48, 0x4b, 0x65, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirConditioning(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirConditioning(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass WaterPump
	/// Description for Company.CyberPhisical_final.WaterPump
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.WaterPump.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.WaterPump.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d29e4c68-900f-4a34-9421-38cb1bb83432")]
	public partial class WaterPump : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WaterPump domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd29e4c68, 0x900f, 0x4a34, 0x94, 0x21, 0x38, 0xcb, 0x1b, 0xb8, 0x34, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WaterPump(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WaterPump(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.CyberPhisical_final
{
	/// <summary>
	/// DomainClass DomainClass1
	/// Description for Company.CyberPhisical_final.DomainClass1
	/// </summary>
	[DslDesign::DisplayNameResource("Company.CyberPhisical_final.DomainClass1.DisplayName", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.CyberPhisical_final.DomainClass1.Description", typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel), "Company.CyberPhisical_final.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.CyberPhisical_final.CyberPhisical_finalDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1250097d-8a44-4cde-be0d-6e8e468ac023")]
	public partial class DomainClass1 : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainClass1 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1250097d, 0x8a44, 0x4cde, 0xbe, 0x0d, 0x6e, 0x8e, 0x46, 0x8a, 0xc0, 0x23);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainClass1(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainClass1(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
